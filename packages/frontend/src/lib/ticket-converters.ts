// Type converters between frontend FrontendTicket interface and backend API types
import { FrontendTicket, BaseTicket, CreateTicketDto, UpdateTicketDto, baseToFrontendTicket, frontendToBaseTicket } from '@wrm/types';

// Default ticket type ID - we'll need this for tickets created without specifying a type
// TODO: Make this configurable or fetch from API
const DEFAULT_TICKET_TYPE_ID = '00000000-0000-0000-0000-000000000001';

export function apiTicketToFrontend(apiTicket: BaseTicket): FrontendTicket {
  return baseToFrontendTicket(apiTicket);
}

export function frontendTicketToCreateRequest(ticket: Omit<FrontendTicket, 'id'>): CreateTicketDto {
  // Create a mock complete ticket to transform
  const mockCompleteTicket: FrontendTicket = {
    ...ticket,
    id: '', // Will be generated by server
    userId: ticket.userId || '', // Will be set by server
    createdAt: ticket.createdAt || new Date().toISOString(),
    updatedAt: ticket.updatedAt || new Date().toISOString(),
    typeId: ticket.typeId || DEFAULT_TICKET_TYPE_ID,
    customProperties: ticket.customProperties || {},
  };

  const baseTicket = frontendToBaseTicket(mockCompleteTicket);

  return {
    title: baseTicket.title,
    startTime: baseTicket.startTime,
    endTime: baseTicket.endTime,
    typeId: baseTicket.typeId,
    customProperties: baseTicket.customProperties,
  };
}

export function frontendTicketToUpdateRequest(ticket: FrontendTicket): UpdateTicketDto {
  const baseTicket = frontendToBaseTicket(ticket);
  
  return {
    title: baseTicket.title,
    startTime: baseTicket.startTime,
    endTime: baseTicket.endTime,
    typeId: baseTicket.typeId,
    customProperties: baseTicket.customProperties,
  };
}
